class Level{
	
	field int levelNum;
	field Array consequences;
	
	constructor Level new(int number){
		let levelNum = number;
		do initArray();	
		return this;	
	}
	
	method void initArray(){
		let consequences = Array.new(20);
		let consequences[0] = "Take an extra shot";
		let consequences[1] = "Do 10 push-ups and shotgun a beer";
		let consequences[2] = "Shotgun a beer while doing a handstand";
		let consequences[3] = "Develop a beer n sammich machine";
		let consequences[4] = "Test4";
		let consequences[5] = "Test5";
		let consequences[6] = "Test6";
		let consequences[7] = "Test7";
		let consequences[8] = "Test8";
		let consequences[9] = "Test9";
		let consequences[10] = "Test11";
		let consequences[11] = "Test12";
		let consequences[12] = "Test13";
		let consequences[13] = "Test14";
		let consequences[14] = "Test15";
		let consequences[15] = "Test16";
		let consequences[16] = "Test17";
		let consequences[17] = "Test81";
		let consequences[18] = "Test19";
		let consequences[19] = "Test20";
		
		return;
	}
	method void dispose(){
		do consequences.dispose();
		do Memory.deAlloc(this);
		return;
	}
	
	method void startLevel(){
		var int choice;
		var int i;
		

		do drawCards(8);
		do drawWizard();
		do Output.moveCursor(20,1);
		
		let choice = Keyboard.readInt("Please Enter the number of your choice: ");
		while(Keyboard.keyPressed() = true){
			let i = i+1;
		}
		while(i>20){
			let i = Math.divide(i,20);
		}
		do Screen.clearScreen();
		do Output.moveCursor(0,0);
		do Output.printString(getConsequence(i));
		return;
	}

	method void drawCards(int numCards){
		var int i, iter;
		var int x1, x2, y1, y2;
		var int cursePos, j;
		let i = 0;
		let iter = 0;
		
		while (i < numCards) {
			//Draw top row of cards	
			let x1 = i * 80;
			let x2 = ((i + 1) * 80) - 10;
			
			if (i > 3) {
				let x1 = (i - 4) * 80;
				let x2 = (((i - 4) + 1) * 80) - 10;
				let y1 = 110;
				let y2 = 210;
			} else {
				let x1 = i * 80;
				let x2 = ((i + 1) * 80) - 10;
				let y1 = 0;
				let y2 = 100;
			}
	
			do Screen.drawRectangle(x1, y1, x2, y2);
		
			do Screen.setColor(false);
			
			let x1 = x1 + 20;
			let x2 = x2 - 20;
			
			if (i > 3) {
				let y1 = 140; 
				let y2 = 180;
			} else {
				let y1 = 30;
				let y2 = 70;
			}
		
			do Screen.drawRectangle(x1, y1, x2, y2);
			
			do Screen.setColor(true);
		
			//var int cursePos, j;
			let j = i + 1;
			
			//Number the top row of cards
			if (i > 3) {
				let cursePos = ((i - 4) * 10) + 4;
				do Output.moveCursor(14, cursePos);
			} else {
				let cursePos = (i * 10) + 4;
				do Output.moveCursor(4, cursePos);
			}
			do Output.printInt(j);
			
			let i = i + 1;
		}

	method string getConsequence(int num){
		return consequences[num];
	}

	method void drawWizard(){
		//Draw Head
		do Screen.drawCircle(410,50,30);
		do Screen.setColor(false);
		do Screen.drawCircle(410,50,25);
		do Screen.setColor(true);
		
		//Draw Body
		do Screen.drawRectangle(409,80,411,190);
		
		//Left Leg
		do Screen.drawLine(409, 190, 380, 230);
		do Screen.drawLine(410, 190, 381, 230);
		do Screen.drawLine(411, 190, 382, 230);
		
		//Right Leg
		do Screen.drawLine(409, 190, 440, 230);
		do Screen.drawLine(410, 190, 441, 230);
		do Screen.drawLine(411, 190, 442, 230);
		
		//Left Arm
		do Screen.drawLine(409, 130, 370, 100);
		do Screen.drawLine(410, 130, 371, 100);
		do Screen.drawLine(411, 130, 372, 100);
		
		//Right Arm
		do Screen.drawLine(409, 130, 450, 100);
		do Screen.drawLine(410, 130, 451, 100);
		do Screen.drawLine(411, 130, 452, 100);
		
		return;
	}

}