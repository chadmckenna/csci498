// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:	
	Mux16(a=instruction, b=true, sel=false, out=decodeOut, out[15]=type, out[12]=aBit, out[11]=c1, out[10]=c2, out[9]=c3, out[8]=c4, out[7]=c5, out[6]=c6, out[5]=d1, out[4]=d2, out[3]=d3, out[2]=j1, out[1]=j2, out[0]=j3); // Decoder
	
	Not(in=type, out=nType);
	Mux(a=nType, b=d1, sel=type, out=mType);

	Mux(a=type, b=d3, sel=type, out=writeM);
	
	Mux16(a=decodeOut, b=outM2, sel=instruction[15], out=typeOut);	
	
	ARegister(in=typeOut, load=mType, out=aOut, out[0..14]=addressM);	// A
	DRegister(in=outM2, load=d2, out=dOut);								// D
	
	Mux16(a=aOut, b=inM, sel=aBit, out=amOut);							// maybe aBit?
	
	
	Or(a=j1, b=j2, out=j1Orj2);
	Or(a=j1Orj2, b=j3, out=j12Orj3);
	And(a=j12Orj3, b=instruction[15], out=jump);
	
	PC(in=aOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
	ALU(x=dOut, y=amOut, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=outM2);
}

