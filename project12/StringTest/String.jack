// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/String.jack

/**
 * The String type.
 */
class String {

	field int length, maxLength;
	field Array thisString;

    /** Constructs a new empty String with a maximum length of
     *  maxLength. */
    constructor String new(int maxLength) {
		let length = 0;
		let maxLength = maxLength;
		if (maxLength > 0) {
			let thisString = Array.new(maxLength);
		}
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		//return Memory.peek(thisString + j);
		return thisString[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		do Memory.poke(thisString + j, c);
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		do Memory.poke(thisString + length, c);
		let length = length + 1;
		return this; 
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		let length = length - 1;
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int v, i, d;
		let v = 0;
		let i = 0;
		
		while (i < length) {
			let d = charAt(i);
			if (~(d = 45)) {
				let v = v * 10 + d;
			}
			let i = i + 1;
		}
		
		return v;
    }

    /** Sets this String to hold a representation of the given
     *  number. */
    method void setInt(int number) {
		var int rem;
		let length = 0;
		if (number < 0) {
			do appendChar(45);
			let number = -number;
		}
		if (number = 0) {
			do appendChar(48);
			return;
		}
		do setInt2(number);
		
		return; 	
    }

    method void setInt2(int number){
    	var int remainder;
    	if (number = 0){
    		return;
    	}
    	let remainder = number - ((number / 10) * 10);
    	do setInt2(number / 10);
    	do appendChar(remainder + 48);
    	return;
	}

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
